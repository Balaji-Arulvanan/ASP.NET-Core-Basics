{"version":3,"sources":["app.js","environment.js","main.js","contacts/contact-list.js","contacts/contact-service.js","contacts/contact.js","resources/index.js","C:/Users/eanderson/Source/Repos/ASP.NET-Core-Basics/ASP.NET Core Basics/src/Aurelia/src/app.html","C:/Users/eanderson/Source/Repos/ASP.NET-Core-Basics/ASP.NET Core Basics/src/Aurelia/src/contacts/contact-list.html"],"names":["App","debug","testing","configure","Promise","config","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","ContactList","inject","contactService","contacts","created","GetAll","ContactService","http","useStandardConfiguration","withBaseUrl","fetch","response","json","Array","from","c","catch","console","log","error","Contact","data","Object","assign","getAddress","address","city","state","postalCode"],"mappings":";;;;;;;;;;;;;MAAaA,cAAAA;;;;;;;;;;oBCAE;AACbC,WAAO,IADM;AAEbC,aAAS;AAFI;;;;;;;;UCUCC,YAAAA;;;;;;;;;;AANhBC,UAAQC,MAAR,CAAe;AACbC,cAAU;AACRC,wBAAkB;AADV;AADG,GAAf;;AAMO,WAASJ,SAAT,CAAmBK,OAAnB,EAA4B;AACjCA,YAAQC,GAAR,CACGC,qBADH,GAEGC,OAFH,CAEW,WAFX;;AAIA,QAAI,sBAAYV,KAAhB,EAAuB;AACrBO,cAAQC,GAAR,CAAYG,kBAAZ;AACD;;AAED,QAAI,sBAAYV,OAAhB,EAAyB;AACvBM,cAAQC,GAAR,CAAYI,MAAZ,CAAmB,iBAAnB;AACD;;AAEDL,YAAQM,KAAR,GAAgBC,IAAhB,CAAqB;AAAA,aAAMP,QAAQQ,OAAR,EAAN;AAAA,KAArB;AACD;;;;;;;;;;;;;;;;QCtBYC,sBAAAA;oBACFC,2BAAS;AAAE,mBAAO,gCAAP;AAAyB;;AAE3C,6BAAYC,cAAZ,EAA4B;AAAA;;AACxB,iBAAKA,cAAL,GAAsBA,cAAtB;AACA,iBAAKC,QAAL,GAAgB,EAAhB;AACH;;8BAEDC,6BAAU;AAAA;;AACN,iBAAKF,cAAL,CAAoBG,MAApB,GACKP,IADL,CACU;AAAA,uBAAY,MAAKK,QAAL,GAAgBA,QAA5B;AAAA,aADV;AAEH;;;;;;;;;;;;;;;;;;;QCVQG,yBAAAA;uBACFL,2BAAS;AAAE,mBAAO,gCAAP;AAAqB;;AAEvC,gCAAYM,IAAZ,EAAkB;AAAA;;AACd,iBAAKA,IAAL,GAAYA,IAAZ;;AAEA,iBAAKA,IAAL,CAAUrB,SAAV,CAAoB,kBAAU;AAC1BE,uBACKoB,wBADL,GAEKC,WAFL,CAEiB,yCAFjB;AAGH,aAJD;AAKH;;iCAEDJ,2BAAS;AACN,mBAAO,KAAKE,IAAL,CAAUG,KAAV,CAAgB,EAAhB,EACDZ,IADC,CACI;AAAA,uBAAYa,SAASC,IAAT,EAAZ;AAAA,aADJ,EAEDd,IAFC,CAEI;AAAA,uBAAYe,MAAMC,IAAN,CAAWX,QAAX,EAAqB;AAAA,2BAAK,qBAAYY,CAAZ,CAAL;AAAA,iBAArB,CAAZ;AAAA,aAFJ,EAGDC,KAHC,CAGK;AAAA,uBAASC,QAAQC,GAAR,CAAYC,KAAZ,CAAT;AAAA,aAHL,CAAP;AAIF;;;;;;;;;;;;;;;;;;QCrBQC,kBAAAA;AACT,yBAAYC,IAAZ,EAAkB;AAAA;;AACdC,mBAAOC,MAAP,CAAc,IAAd,EAAoBF,IAApB;AACH;;0BAEDG,mCAAa;AACT,mBAAU,KAAKC,OAAf,SAA0B,KAAKC,IAA/B,UAAwC,KAAKC,KAA7C,SAAsD,KAAKC,UAA3D;AACH;;;;;;;;;;;UCPW1C,YAAAA;AAAT,WAASA,SAAT,CAAmBE,MAAnB,EAA2B,CAEjC;;ACFD;ACAA","file":"app-bundle.js","sourcesContent":["export class App {\n}","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import { ContactService } from './contact-service';\r\n\r\nexport class ContactList {\r\n    static inject() { return [ContactService] };\r\n\r\n    constructor(contactService) {\r\n        this.contactService = contactService;\r\n        this.contacts = [];\r\n    }\r\n\r\n    created() {\r\n        this.contactService.GetAll()\r\n            .then(contacts => this.contacts = contacts);\r\n    }\r\n}","import { HttpClient } from 'aurelia-fetch-client';\nimport { Contact } from './contact';\n\nexport class ContactService {\n    static inject() { return [HttpClient] };\n\n    constructor(http) {\n        this.http = http;\n\n        this.http.configure(config => {\n            config\n                .useStandardConfiguration()\n                .withBaseUrl('http://localhost:13322/api/contactsApi/');\n        });\n    }\n\n    GetAll() {\n       return this.http.fetch('')\n            .then(response => response.json())\n            .then(contacts => Array.from(contacts, c => new Contact(c)))\n            .catch(error => console.log(error));\n    }\n}","export class Contact {\r\n    constructor(data) {\r\n        Object.assign(this, data);\r\n    }\r\n\r\n    getAddress() {\r\n        return `${this.address} ${this.city}, ${this.state} ${this.postalCode}`;\r\n    }\r\n}","export function configure(config) {\n  //config.globalResources([]);\n}\n",null,null],"sourceRoot":"..\\..\\src"}